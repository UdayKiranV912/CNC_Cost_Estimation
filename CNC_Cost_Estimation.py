# -*- coding: utf-8 -*-
"""– Automated CNC Costing  Engine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PkHcxLMqJNuuauR-kPJqGusIOqL3vxRF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

np.random.seed(42)

materials = ['Aluminum', 'Steel', 'Titanium', 'Brass', 'Plastic']
data = []
for _ in range(200):
    material = np.random.choice(materials)
    length = np.random.uniform(10, 200)
    width = np.random.uniform(10, 200)
    height = np.random.uniform(5, 100)
    volume = length * width * height
    cycle_time = volume / np.random.uniform(200, 1000) + np.random.uniform(2, 15)
    material_cost_factor = {'Aluminum':1.2,'Steel':1.5,'Titanium':2.5,'Brass':1.7,'Plastic':0.9}[material]
    estimated_cost = volume * material_cost_factor * 0.01 + cycle_time * 0.8
    data.append([material,length,width,height,volume,cycle_time,estimated_cost])

df = pd.DataFrame(data, columns=['Material','Length_mm','Width_mm','Height_mm','Volume_mm3','Cycle_Time_min','Quoted_Cost'])

print("First 5 rows:")
display(df.head())

print("\nData types:")
print(df.dtypes)

print("\nMissing values per column:")
print(df.isnull().sum())

print("\nDuplicate rows count:")
print(df.duplicated().sum())

print("\nDescriptive statistics:")
display(df.describe())

df['Cost_per_mm3'] = df['Quoted_Cost'] / df['Volume_mm3']
df['Surface_Area_mm2'] = 2 * (df['Length_mm']*df['Width_mm'] + df['Width_mm']*df['Height_mm'] + df['Height_mm']*df['Length_mm'])
df['Surface_to_Volume_Ratio'] = df['Surface_Area_mm2'] / df['Volume_mm3']

plt.figure(figsize=(8,4))
sns.histplot(df['Quoted_Cost'], bins=30, kde=True)
plt.title("Quoted Cost Distribution")
plt.xlabel("Quoted Cost")
plt.ylabel("Frequency")
plt.show()

plt.figure(figsize=(8,5))
sns.boxplot(x='Material', y='Cycle_Time_min', data=df)
plt.title("Cycle Time by Material")
plt.ylabel("Cycle Time (minutes)")
plt.show()

plt.figure(figsize=(8,5))
sns.scatterplot(x='Volume_mm3', y='Quoted_Cost', hue='Material', data=df)
plt.title("Quoted Cost vs Volume by Material")
plt.xlabel("Volume (mm³)")
plt.ylabel("Quoted Cost")
plt.show()

plt.figure(figsize=(10,7))
corr = df.select_dtypes(include=np.number).corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()

df_encoded = pd.get_dummies(df, columns=['Material'], drop_first=True)

feature_cols = ['Volume_mm3', 'Cycle_Time_min', 'Surface_Area_mm2', 'Cost_per_mm3', 'Surface_to_Volume_Ratio'] + \
               [col for col in df_encoded.columns if col.startswith('Material_')]

X = df_encoded[feature_cols]
y = df_encoded['Quoted_Cost']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"Model Performance on Test Set:\nMAE: {mae:.2f}\nRMSE: {rmse:.2f}\nR²: {r2:.2f}")

plt.figure(figsize=(7,6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel("Actual Quoted Cost")
plt.ylabel("Predicted Quoted Cost")
plt.title("Predicted vs Actual Quoted Cost")
plt.show()

importances = model.feature_importances_
feat_imp_df = pd.DataFrame({"Feature": X.columns, "Importance": importances}).sort_values(by="Importance", ascending=False)

plt.figure(figsize=(8,6))
sns.barplot(data=feat_imp_df, x='Importance', y='Feature')
plt.title("Feature Importance in Random Forest Model")
plt.show()